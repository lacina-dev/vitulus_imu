#!/usr/bin/env python
import rospy
from sensor_msgs.msg import MagneticField, Imu
from vitulus_msgs.msg import Imu_status
import sys
import serial
import signal
import adafruit_bno08x
from adafruit_bno08x.uart import BNO08X_UART


class BNO085Node:

    def __init__(self):
        self.imu_pub = rospy.Publisher('bno085/imu', Imu, queue_size=10)
        self.nevheading_pub = rospy.Publisher('bno085/navheading', Imu, queue_size=10)
        self.mag_pub = rospy.Publisher('bno085/mag', MagneticField, queue_size=10)
        rospy.loginfo("<{}> Connecting UART /dev/imu, baudrate 3000000...".format(rospy.get_caller_id()))
        self.uart = serial.Serial("/dev/imu", baudrate=3000000)
        self.bno = BNO08X_UART(self.uart, debug=False)
        rospy.loginfo("<{}> UART connected.".format(rospy.get_caller_id()))

        self.imu_status_pub = rospy.Publisher('bno085/imu_status', Imu_status, queue_size=10)
        self.msg_bno085_status = Imu_status()
        self.msg_bno085_status.status = False
        self.msg_bno085_status.header.stamp = rospy.Time.now()


        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_ACCELEROMETER)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_GYROSCOPE)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_MAGNETOMETER)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_ROTATION_VECTOR)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_LINEAR_ACCELERATION)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_GEOMAGNETIC_ROTATION_VECTOR)
        self.bno.enable_feature(adafruit_bno08x.BNO_REPORT_GAME_ROTATION_VECTOR)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_STEP_COUNTER)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_STABILITY_CLASSIFIER)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_ACTIVITY_CLASSIFIER)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_SHAKE_DETECTOR)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_RAW_ACCELEROMETER)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_RAW_GYROSCOPE)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_RAW_MAGNETOMETER)
        # bno.enable_feature(adafruit_bno08x.BNO_REPORT_GYRO_INTEGRATED_ROTATION_VECTOR)

    def publish_imu_status(self):
        self.msg_bno085_status.header.stamp = rospy.Time.now()
        self.imu_status_pub.publish(self.msg_bno085_status)

    def publish_imu(self):
        acc_x, acc_y, acc_z = self.bno.acceleration
        gyro_x, gyro_y, gyro_z = self.bno.gyro
        # orientation_x, orientation_y, orientation_z, orientation_w = self.bno.quaternion
        # orientation_x, orientation_y, orientation_z, orientation_w = self.bno.geomagnetic_quaternion
        orientation_x, orientation_y, orientation_z, orientation_w = self.bno.game_quaternion
        imu_msg = Imu()
        imu_msg.header.stamp = rospy.Time.now()
        imu_msg.header.frame_id = "bno_imu_link"
        imu_msg.orientation.x = orientation_x
        imu_msg.orientation.y = orientation_y
        imu_msg.orientation.z = orientation_z
        imu_msg.orientation.w = orientation_w
        imu_msg.orientation_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        imu_msg.angular_velocity.x = gyro_x
        imu_msg.angular_velocity.y = gyro_y
        imu_msg.angular_velocity.z = gyro_z
        imu_msg.angular_velocity_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        imu_msg.linear_acceleration.x = acc_x
        imu_msg.linear_acceleration.y = acc_y
        imu_msg.linear_acceleration.z = acc_z
        imu_msg.linear_acceleration_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        if ((orientation_x + orientation_y + orientation_z + orientation_w) != 0.0):
            self.imu_pub.publish(imu_msg)

    def publish_mag(self):
        mag_x, mag_y, mag_z = self.bno.magnetic
        mag_msg = MagneticField()
        mag_msg.header.stamp = rospy.Time.now()
        mag_msg.header.frame_id = "bno_imu_link"
        mag_msg.magnetic_field.x = mag_x * 0.000001
        mag_msg.magnetic_field.y = mag_y * 0.000001
        mag_msg.magnetic_field.z = mag_z * 0.000001
        mag_msg.magnetic_field_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        self.mag_pub.publish(mag_msg)

    def publish_imu_heading(self):
        acc_x, acc_y, acc_z = self.bno.acceleration
        gyro_x, gyro_y, gyro_z = self.bno.gyro
        orientation_x, orientation_y, orientation_z, orientation_w = self.bno.quaternion
        imu_msg = Imu()
        imu_msg.header.stamp = rospy.Time.now()
        imu_msg.header.frame_id = "bno_imu_link"
        imu_msg.orientation.x = orientation_x
        imu_msg.orientation.y = orientation_y
        imu_msg.orientation.z = orientation_z
        imu_msg.orientation.w = orientation_w
        imu_msg.orientation_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        imu_msg.angular_velocity.x = gyro_x
        imu_msg.angular_velocity.y = gyro_y
        imu_msg.angular_velocity.z = gyro_z
        imu_msg.angular_velocity_covariance = [0.025, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.025]
        imu_msg.linear_acceleration.x = acc_x
        imu_msg.linear_acceleration.y = acc_y
        imu_msg.linear_acceleration.z = acc_z
        imu_msg.linear_acceleration_covariance = [1000.00, 0.0, 0.0, 0.0, 1000.00, 0.0, 0.0, 0.0, 1000.00]
        if ((orientation_x + orientation_y + orientation_z + orientation_w) != 0.0):
            self.nevheading_pub.publish(imu_msg)


if __name__ == '__main__':
    try:
        rospy.init_node('bno085_node')
        rospy.loginfo("<{}> Initialising bno085_node...".format(rospy.get_caller_id()))
        node_bno085 = BNO085Node()
        rate = 100
        r = rospy.Rate(rate)  # 100Hz

        def signal_handler():
            node_bno085.uart.close()
            rospy.signal_shutdown("end")
            sys.exit(0)
        signal.signal(signal.SIGINT, signal_handler)

        rospy.loginfo("<{}> Initialised.".format(rospy.get_caller_id()))
        slow_counter = 0
        slow_nr = rate  # 1x per second
        while not rospy.is_shutdown():
            node_bno085.publish_mag()
            node_bno085.publish_imu()
            node_bno085.publish_imu_heading()
            node_bno085.msg_bno085_status.status = True
            if (slow_nr == slow_counter):
                node_bno085.publish_imu_status()
                slow_counter = 0
            slow_counter += 1
            r.sleep()

    except rospy.ROSInterruptException:
        rospy.loginfo(rospy.get_caller_id() + "  BNO085_node error.")
